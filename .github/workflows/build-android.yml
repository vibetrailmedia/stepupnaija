name: Build Android APK

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Java 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Configure npm for better reliability
      run: |
        npm config set registry https://registry.npmjs.org/
        npm config set fetch-retries 5
        npm config set fetch-retry-mintimeout 20000
        npm config set fetch-retry-maxtimeout 120000
        npm config set fetch-timeout 300000
        npm config set maxsockets 1
        
        echo "Node.js version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Java version: $(java -version)"
        echo "JAVA_HOME: $JAVA_HOME"
    
    - name: Install dependencies with retry
      run: |
        echo "Installing project dependencies with network resilience..."
        
        install_with_retry() {
          for i in {1..5}; do
            echo "Attempt $i/5: Installing dependencies..."
            if npm ci --prefer-offline --no-audit --no-fund --maxsockets=1; then
              echo "✅ Dependencies installed successfully on attempt $i"
              return 0
            else
              echo "❌ Attempt $i failed, waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          
          echo "All attempts failed, trying with different approach..."
          npm install --prefer-offline --no-audit --no-fund --maxsockets=1
        }
        
        install_with_retry
    
    - name: Create index.html if missing
      run: |
        echo "Checking for index.html files..."
        
        if [ ! -f "index.html" ]; then
          echo "Creating index.html in root directory..."
          cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <link rel="icon" type="image/svg+xml" href="/vite.svg" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Step Up Naija</title>
          </head>
          <body>
            <div id="root"></div>
            <script type="module" src="/src/main.tsx"></script>
          </body>
        </html>
        EOF
        fi
    
    - name: Install ImageMagick
      run: |
        sudo apt-get update
        sudo apt-get install -y imagemagick
    
    - name: Verify assets and fix imports
      run: |
        echo "Verifying asset files exist and fixing component imports..."
        
        mkdir -p attached_assets/generated_images
        echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==" | base64 -d > "attached_assets/generated_images/Nigerian_youth_civic_engagement_scene_024f101a.png"
        
        if [ -f "src/pages/community-chat.tsx" ]; then
          sed -i 's/RealtimeNotifications/RealTimeNotifications/g' src/pages/community-chat.tsx
          sed -i 's/@\/components\/RealtimeNotifications/@\/components\/RealTimeNotifications/g' src/pages/community-chat.tsx
          echo "✅ Fixed community-chat.tsx imports"
        fi
        
        echo "✅ Asset verification and import fixes complete!"
    
    - name: Build web app
      run: |
        echo "Building web app..."
        if [ -f "vite.config.mobile.ts" ]; then
          npx vite build --config vite.config.mobile.ts
        else
          npx vite build
        fi
        
        echo "Build completed. Checking output directories:"
        ls -la . | grep -E "(dist|build)"
        
        if [ -d "dist/public" ]; then
          echo "✅ dist/public directory exists"
        elif [ -d "dist" ]; then
          echo "Creating dist/public from dist directory..."
          mkdir -p dist/public
          cp -r dist/* dist/public/ 2>/dev/null || true
        elif [ -d "build" ]; then
          echo "Creating dist/public from build directory..."
          mkdir -p dist/public
          cp -r build/* dist/public/ 2>/dev/null || true
        else
          echo "❌ No build output found, creating minimal dist/public"
          mkdir -p dist/public
          cp index.html dist/public/ 2>/dev/null || true
        fi
        
        echo "Final dist/public contents:"
        ls -la dist/public/ 2>/dev/null || echo "dist/public not found"
        
        if [ ! -f "dist/public/index.html" ]; then
          echo "Creating index.html in dist/public"
          cp index.html dist/public/ 2>/dev/null || true
        fi
    
    - name: Install Capacitor CLI with retry
      run: |
        for i in {1..3}; do
          echo "Attempt $i/3: Installing Capacitor CLI..."
          if npm install -g @capacitor/cli@latest --maxsockets=1; then
            echo "✅ Capacitor CLI installed successfully"
            break
          else
            echo "❌ Attempt $i failed, waiting 15 seconds..."
            sleep 15
          fi
        done
    
    - name: Initialize Capacitor
      run: |
        if [ ! -f "capacitor.config.ts" ] && [ ! -f "capacitor.config.json" ]; then
          npx cap init "Step Up Naija" "com.stepup.naija" --web-dir="dist/public"
        fi
        
        echo "Verifying web directory for Capacitor:"
        ls -la dist/public/ 2>/dev/null || echo "❌ dist/public still missing"
    
    - name: Add Android platform
      run: |
        rm -rf android 2>/dev/null || true
        
        npx cap add android
        npx cap copy android
        npx cap sync android
    
    - name: Conservative Java 17 fix for Android
      run: |
        cd android
        
        echo "🔧 Conservative Java 17 fix - minimal changes only..."
        
        # Get the actual JAVA_HOME path dynamically
        ACTUAL_JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
        echo "Detected JAVA_HOME: $ACTUAL_JAVA_HOME"
        
        # Fix root gradle.properties only
        if [ -f "gradle.properties" ]; then
          sed -i '/org.gradle.jvmargs/d' gradle.properties
          sed -i '/org.gradle.java.home/d' gradle.properties
        fi
        
        cat >> gradle.properties << EOF

        # Java 17 Configuration
        org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:+UseParallelGC
        org.gradle.java.home=$ACTUAL_JAVA_HOME
        EOF
        
        # Conservative function - only fix obvious Java version issues
        fix_gradle_conservative() {
          local file="$1"
          echo "🛠️ Conservative fix for $file..."
          
          # Create backup
          cp "$file" "$file.backup"
          
          # Only fix obvious Java version conflicts (replace 21 with 17)
          sed -i 's/JavaVersion\.VERSION_21/JavaVersion.VERSION_17/g' "$file"
          sed -i 's/jvmTarget = "21"/jvmTarget = "17"/g' "$file"
          sed -i 's/jvmTarget = 21/jvmTarget = "17"/g' "$file"
          sed -i 's/sourceCompatibility.*21/sourceCompatibility JavaVersion.VERSION_17/g' "$file"
          sed -i 's/targetCompatibility.*21/targetCompatibility JavaVersion.VERSION_17/g' "$file"
          
          # Only add compileOptions if it's clearly missing AND this is an Android module
          if grep -q "android {" "$file" && ! grep -q "compileOptions" "$file" && ! grep -q "sourceCompatibility" "$file"; then
            echo "Adding minimal compileOptions to $file..."
            sed -i '/android {/a\
            \
                compileOptions {\
                    sourceCompatibility JavaVersion.VERSION_17\
                    targetCompatibility JavaVersion.VERSION_17\
                }' "$file"
          fi
          
          # DON'T add kotlinOptions unless we know Kotlin is present
          echo "Skipping kotlinOptions for safety in $file"
        }
        
        # Fix all build.gradle files conservatively
        find . -name "build.gradle" -type f | while read gradle_file; do
          fix_gradle_conservative "$gradle_file"
        done
        
        # Also handle .kts files conservatively
        find . -name "build.gradle.kts" -type f | while read gradle_file; do
          echo "🛠️ Conservative fix for Kotlin build file: $gradle_file"
          cp "$gradle_file" "$gradle_file.backup"
          sed -i 's/JavaVersion\.VERSION_21/JavaVersion.VERSION_17/g' "$gradle_file"
          sed -i 's/jvmTarget = "21"/jvmTarget = "17"/g' "$gradle_file"
        done
        
        echo "✅ Conservative Android configuration completed"
        
        echo "🔍 Verification - Java setup:"
        java -version
        echo "JAVA_HOME: $ACTUAL_JAVA_HOME"
        
        echo "🔍 Verification - Files modified:"
        find . -name "*.backup" -type f
    
    - name: Build Android APK with conservative settings
      run: |
        cd android
        chmod +x ./gradlew
        
        # Set up environment
        ACTUAL_JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
        export JAVA_HOME=$ACTUAL_JAVA_HOME
        export PATH=$JAVA_HOME/bin:$PATH
        export JAVA_OPTS="-Xmx4g"
        export GRADLE_OPTS="-Dorg.gradle.java.home=$JAVA_HOME -Dfile.encoding=UTF-8 -Xmx4g"
        
        echo "🚀 Building with conservative Java 17 environment:"
        echo "Java version: $(java -version)"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "GRADLE_OPTS: $GRADLE_OPTS"
        
        # Clean first
        echo "🧹 Cleaning previous build..."
        ./gradlew clean --no-daemon --stacktrace
        
        # Build with minimal flags
        echo "🔨 Building APK conservatively..."
        ./gradlew assembleDebug --no-daemon --stacktrace \
          -Dorg.gradle.java.home=$JAVA_HOME \
          -Dfile.encoding=UTF-8
    
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: step-up-naija-debug.apk
        path: android/app/build/outputs/apk/debug/app-debug.apk
        retention-days: 30
    
    - name: Upload debug files on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: debug-files
        path: |
          android/**/*.backup
          android/gradle.properties
          android/app/build.gradle
          android/build/reports/
        retention-days: 7
    
    - name: Display APK info
      if: success()
      run: |
        echo "✅ Step Up Naija Android APK built successfully!"
        echo "📱 Location: android/app/build/outputs/apk/debug/app-debug.apk"
        ls -la android/app/build/outputs/apk/debug/
